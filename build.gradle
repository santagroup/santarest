// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.+'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.3.1'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
}

allprojects {
    status = "release"
    repositories {
        mavenCentral()
        jcenter()
    }
}

if (hasProperty("bintray_user")
        && hasProperty("bintray_apikey")
        && hasProperty("bintray_gpg")) {
    ["santarest", "santarest-compiler"].each { projectName ->
        project(":$projectName") {

            apply plugin: 'com.jfrog.bintray'
            apply plugin: "maven"
            apply plugin: 'maven-publish'

            group = "com.github.santagroup"
            version = '0.0.1'

            bintray {
                dryRun = false // Turn off when actually deploying

                user = "$bintray_user"
                key = "$bintray_apikey"

                configurations = ['archives']

                pkg {
                    repo = "maven"
                    name = "santarest"
                    userOrg = "santagroup"
                    websiteUrl = "https://github.com/santagroup/santarest"
                    vcsUrl = "https://github.com/santagroup/santarest.git"
                    licenses = ["Apache-2.0"]
                    publish = false
                    publicDownloadNumbers = true
                    version {
                        gpg {
                            sign = true
                            passphrase = "$bintray_gpg"
                        }
                    }
                }
            }

            afterEvaluate { project ->
                task sourcesJar(type: Jar, dependsOn: classes) {
                    classifier = 'sources'
                    from sourceSets.main.allSource
                }

                artifacts {
                    archives sourcesJar
                }
            }
        }
    }
}



